// <auto-generated />
using System;
using LRMS_API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(LRMSDbContext))]
    [Migration("20250505064330_AddConferenceAndJournalColumnsAndRelationships")]
    partial class AddConferenceAndJournalColumnsAndRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LRMS_API.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AuthorId")
                        .HasName("PK__Author__86516BCFD3E29AFB");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("LRMS_API.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("category_name");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__D54EE9B45213372A");

                    b.HasIndex("ProjectId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("LRMS_API.CompletionRequestDetail", b =>
                {
                    b.Property<int>("CompletionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("completion_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompletionDetailId"));

                    b.Property<bool>("BudgetReconciled")
                        .HasColumnType("bit")
                        .HasColumnName("budget_reconciled");

                    b.Property<decimal?>("BudgetRemaining")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("budget_remaining");

                    b.Property<string>("BudgetVarianceExplanation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("budget_variance_explanation");

                    b.Property<string>("CompletionSummary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("completion_summary");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.HasKey("CompletionDetailId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("CompletionRequestDetails");
                });

            modelBuilder.Entity("LRMS_API.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("conference_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceId"));

                    b.Property<DateTime?>("AcceptanceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("acceptance_date");

                    b.Property<decimal?>("ConferenceFunding")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("conference_funding");

                    b.Property<string>("ConferenceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("conference_name");

                    b.Property<int?>("ConferenceRanking")
                        .HasColumnType("int")
                        .HasColumnName("conference_ranking");

                    b.Property<int?>("ConferenceStatus")
                        .HasColumnType("int")
                        .HasColumnName("conference_status");

                    b.Property<int?>("ConferenceSubmissionStatus")
                        .HasColumnType("int")
                        .HasColumnName("conference_submission_status");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location");

                    b.Property<DateTime?>("PresentationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("presentation_date");

                    b.Property<int?>("PresentationType")
                        .HasColumnType("int")
                        .HasColumnName("presentation_type");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("ReviewerComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviewer_comment");

                    b.HasKey("ConferenceId")
                        .HasName("PK__Conferen__DC92030881F39E56");

                    b.HasIndex("ProjectId");

                    b.ToTable("Conference", (string)null);
                });

            modelBuilder.Entity("LRMS_API.ConferenceExpense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<string>("Accomodation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("accomodation");

                    b.Property<decimal?>("AccomodationExpense")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("accomodation_expense");

                    b.Property<int?>("ConferenceId")
                        .HasColumnType("int")
                        .HasColumnName("conference_id");

                    b.Property<string>("Travel")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("travel");

                    b.Property<decimal?>("TravelExpense")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("travel_expense");

                    b.HasKey("ExpenseId")
                        .HasName("PK__Conferen__404B6A6BE00ED890");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Conference_expense", (string)null);
                });

            modelBuilder.Entity("LRMS_API.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("department_name");

                    b.HasKey("DepartmentId")
                        .HasName("PK__Departme__C2232422ADB9B56B");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("LRMS_API.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int?>("ConferenceExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("conference_expense_id");

                    b.Property<int?>("ConferenceId")
                        .HasColumnType("int")
                        .HasColumnName("conference_id");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int")
                        .HasColumnName("document_type");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("document_url");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_name");

                    b.Property<int?>("FundDisbursementId")
                        .HasColumnType("int")
                        .HasColumnName("fund_disbursement_id");

                    b.Property<int?>("JournalId")
                        .HasColumnType("int")
                        .HasColumnName("journal_id");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("ProjectPhaseId")
                        .HasColumnType("int")
                        .HasColumnName("project_phase_id");

                    b.Property<int?>("ProjectResourceId")
                        .HasColumnType("int")
                        .HasColumnName("project_resource_id");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<DateTime?>("UploadAt")
                        .HasColumnType("datetime")
                        .HasColumnName("upload_at");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("int")
                        .HasColumnName("uploaded_by");

                    b.HasKey("DocumentId")
                        .HasName("PK__Document__9666E8ACE9AEE755");

                    b.HasIndex("ConferenceExpenseId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("FundDisbursementId");

                    b.HasIndex("JournalId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("ProjectResourceId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UploadedBy");

                    b.HasIndex(new[] { "DocumentType" }, "IDX_Documents_Type");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("LRMS_API.FundDisbursement", b =>
                {
                    b.Property<int>("FundDisbursementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fund_disbursement_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundDisbursementId"));

                    b.Property<int?>("AppovedBy")
                        .HasColumnType("int")
                        .HasColumnName("appoved_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("DisburseBy")
                        .HasColumnType("int")
                        .HasColumnName("disburse_by");

                    b.Property<decimal?>("FundRequest")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fund_request");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("ProjectPhaseId")
                        .HasColumnType("int")
                        .HasColumnName("project_phase_id");

                    b.Property<int?>("QuotaId")
                        .HasColumnType("int")
                        .HasColumnName("quota_id");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.Property<int?>("UserRequest")
                        .HasColumnType("int")
                        .HasColumnName("user_request");

                    b.HasKey("FundDisbursementId")
                        .HasName("PK__Fund_Dis__7FED8C5489F7F33D");

                    b.HasIndex("AppovedBy");

                    b.HasIndex("DisburseBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("QuotaId");

                    b.HasIndex("UserRequest");

                    b.ToTable("Fund_Disbursement", (string)null);
                });

            modelBuilder.Entity("LRMS_API.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int?>("CurrentMember")
                        .HasColumnType("int")
                        .HasColumnName("current_member");

                    b.Property<int?>("GroupDepartment")
                        .HasColumnType("int")
                        .HasColumnName("group_department");

                    b.Property<string>("GroupName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("group_name");

                    b.Property<int?>("GroupType")
                        .HasColumnType("int")
                        .HasColumnName("group_type");

                    b.Property<int?>("MaxMember")
                        .HasColumnType("int")
                        .HasColumnName("max_member");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("GroupId")
                        .HasName("PK__Groups__D57795A03A6C1236");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupDepartment");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("LRMS_API.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_member_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMemberId"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime")
                        .HasColumnName("join_date");

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("GroupMemberId")
                        .HasName("PK__Group_Me__F3C66B8CE62B0790");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Group_Member", (string)null);
                });

            modelBuilder.Entity("LRMS_API.Invitation", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invitation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvitationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int?>("InvitedRole")
                        .HasColumnType("int")
                        .HasColumnName("invited_role");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int?>("RecieveBy")
                        .HasColumnType("int")
                        .HasColumnName("recieve_by");

                    b.Property<DateTime?>("RespondDate")
                        .HasColumnType("datetime")
                        .HasColumnName("respond_date");

                    b.Property<int?>("SentBy")
                        .HasColumnType("int")
                        .HasColumnName("sent_by");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("InvitationId")
                        .HasName("PK__Invitati__94B74D7C436FE83E");

                    b.HasIndex("GroupId");

                    b.HasIndex("RecieveBy");

                    b.HasIndex("SentBy");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("LRMS_API.Journal", b =>
                {
                    b.Property<int>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("journal_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalId"));

                    b.Property<DateTime?>("AcceptanceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("acceptance_date");

                    b.Property<string>("DoiNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("doi_number");

                    b.Property<decimal?>("JournalFunding")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("journal_funding");

                    b.Property<string>("JournalName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("journal_name");

                    b.Property<int?>("JournalStatus")
                        .HasColumnType("int")
                        .HasColumnName("journal_status");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("publication_date");

                    b.Property<string>("PublisherName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("publisher_name");

                    b.Property<int?>("PublisherStatus")
                        .HasColumnType("int")
                        .HasColumnName("publisher_status");

                    b.Property<string>("ReviewerComments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviewer_comments");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("submission_date");

                    b.HasKey("JournalId")
                        .HasName("PK__Journal__9894D298AFDA5EC3");

                    b.HasIndex("ProjectId");

                    b.ToTable("Journal", (string)null);
                });

            modelBuilder.Entity("LRMS_API.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("InvitationId")
                        .HasColumnType("int")
                        .HasColumnName("invitation_id");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842FD5E27EE0");

                    b.HasIndex("InvitationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LRMS_API.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<decimal?>("ApprovedBudget")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("approved_budget");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Methodlogy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("methodlogy");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("project_name");

                    b.Property<int?>("ProjectType")
                        .HasColumnType("int")
                        .HasColumnName("project_type");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SequenceId")
                        .HasColumnType("int")
                        .HasColumnName("sequence_id");

                    b.Property<decimal>("SpentBudget")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("spent_budget");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("ProjectId")
                        .HasName("PK__Projects__BC799E1FB00E4B70");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SequenceId");

                    b.HasIndex(new[] { "Status" }, "IDX_Projects_Status");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("LRMS_API.ProjectPhase", b =>
                {
                    b.Property<int>("ProjectPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_phase_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectPhaseId"));

                    b.Property<int?>("AssignBy")
                        .HasColumnType("int")
                        .HasColumnName("assign_by");

                    b.Property<int?>("AssignTo")
                        .HasColumnType("int")
                        .HasColumnName("assign_to");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<decimal>("SpentBudget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("spent_budget");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("ProjectPhaseId")
                        .HasName("PK__ProjectP__67592EB79C6F9174");

                    b.HasIndex("AssignBy");

                    b.HasIndex("AssignTo");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPhase", (string)null);
                });

            modelBuilder.Entity("LRMS_API.ProjectRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int?>("ApprovalStatus")
                        .HasColumnType("int")
                        .HasColumnName("approval_status");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<int?>("AssignedCouncilId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_council");

                    b.Property<int?>("FundDisbursementId")
                        .HasColumnType("int")
                        .HasColumnName("fund_disbursement_id");

                    b.Property<int?>("PhaseId")
                        .HasColumnType("int")
                        .HasColumnName("phase_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rejection_reason");

                    b.Property<int>("RequestType")
                        .HasColumnType("int")
                        .HasColumnName("request_type");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("requested_at");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int")
                        .HasColumnName("timeline_id");

                    b.HasKey("RequestId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("AssignedCouncilId");

                    b.HasIndex("FundDisbursementId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("TimelineId");

                    b.ToTable("ProjectRequests");
                });

            modelBuilder.Entity("LRMS_API.ProjectResource", b =>
                {
                    b.Property<int>("ProjectResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_resource_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectResourceId"));

                    b.Property<bool?>("Acquired")
                        .HasColumnType("bit")
                        .HasColumnName("acquired");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("cost");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("resource_name");

                    b.Property<int?>("ResourceType")
                        .HasColumnType("int")
                        .HasColumnName("resource_type");

                    b.HasKey("ProjectResourceId")
                        .HasName("PK__Project___A2029D37E43DB5DB");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_resources", (string)null);
                });

            modelBuilder.Entity("LRMS_API.Quota", b =>
                {
                    b.Property<int>("QuotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quota_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotaId"));

                    b.Property<decimal?>("AllocatedBudget")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("allocated_budget");

                    b.Property<int?>("AllocatedBy")
                        .HasColumnType("int")
                        .HasColumnName("allocated_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("QuotaId")
                        .HasName("PK__Quotas__FF9A8B250935C34D");

                    b.HasIndex("AllocatedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Quotas");
                });

            modelBuilder.Entity("LRMS_API.Timeline", b =>
                {
                    b.Property<int>("TimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("timeline_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimelineId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Event")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("event");

                    b.Property<int?>("SequenceId")
                        .HasColumnType("int")
                        .HasColumnName("sequence_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("TimelineType")
                        .HasColumnType("int")
                        .HasColumnName("timeline_type");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("TimelineId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SequenceId");

                    b.ToTable("Timeline", "dbo");
                });

            modelBuilder.Entity("LRMS_API.TimelineSequence", b =>
                {
                    b.Property<int>("SequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sequence_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SequenceId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("SequenceColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sequence_color");

                    b.Property<string>("SequenceDescription")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("sequence_description");

                    b.Property<string>("SequenceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sequence_name");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("SequenceId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("TimelineSequence", "dbo");
                });

            modelBuilder.Entity("LRMS_API.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370FCE651109");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "Role" }, "IDX_Users_Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LRMS_API.Author", b =>
                {
                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("Authors")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Author_Projects");

                    b.HasOne("LRMS_API.User", "User")
                        .WithMany("Authors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Author_Users");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LRMS_API.Category", b =>
                {
                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("Categories")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Category_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LRMS_API.CompletionRequestDetail", b =>
                {
                    b.HasOne("LRMS_API.ProjectRequest", "ProjectRequest")
                        .WithOne("CompletionRequestDetail")
                        .HasForeignKey("LRMS_API.CompletionRequestDetail", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");
                });

            modelBuilder.Entity("LRMS_API.Conference", b =>
                {
                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("Conferences")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Conference_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LRMS_API.ConferenceExpense", b =>
                {
                    b.HasOne("LRMS_API.Conference", "Conference")
                        .WithMany("ConferenceExpenses")
                        .HasForeignKey("ConferenceId")
                        .HasConstraintName("FK_ConferenceExpense_Conference");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("LRMS_API.Document", b =>
                {
                    b.HasOne("LRMS_API.ConferenceExpense", "ConferenceExpense")
                        .WithMany("Documents")
                        .HasForeignKey("ConferenceExpenseId")
                        .HasConstraintName("FK_Documents_ConferenceExpense");

                    b.HasOne("LRMS_API.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId")
                        .HasConstraintName("FK_Documents_Conference");

                    b.HasOne("LRMS_API.FundDisbursement", "FundDisbursement")
                        .WithMany("Documents")
                        .HasForeignKey("FundDisbursementId")
                        .HasConstraintName("FK_Documents_FundDisbursement");

                    b.HasOne("LRMS_API.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .HasConstraintName("FK_Documents_Journal");

                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Documents_Projects");

                    b.HasOne("LRMS_API.ProjectPhase", "ProjectPhase")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectPhaseId")
                        .HasConstraintName("FK_Documents_ProjectPhase");

                    b.HasOne("LRMS_API.ProjectResource", "ProjectResource")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectResourceId")
                        .HasConstraintName("FK_Documents_ProjectResources");

                    b.HasOne("LRMS_API.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_Documents_ProjectRequests");

                    b.HasOne("LRMS_API.User", "UploadedByNavigation")
                        .WithMany("Documents")
                        .HasForeignKey("UploadedBy")
                        .HasConstraintName("FK_Documents_Users");

                    b.Navigation("Conference");

                    b.Navigation("ConferenceExpense");

                    b.Navigation("FundDisbursement");

                    b.Navigation("Journal");

                    b.Navigation("Project");

                    b.Navigation("ProjectPhase");

                    b.Navigation("ProjectRequest");

                    b.Navigation("ProjectResource");

                    b.Navigation("UploadedByNavigation");
                });

            modelBuilder.Entity("LRMS_API.FundDisbursement", b =>
                {
                    b.HasOne("LRMS_API.GroupMember", "AppovedByNavigation")
                        .WithMany("FundDisbursementAppovedByNavigations")
                        .HasForeignKey("AppovedBy")
                        .HasConstraintName("FK_FundDisbursement_GroupMember_Approved");

                    b.HasOne("LRMS_API.User", "DisburseByNavigation")
                        .WithMany("FundDisbursements")
                        .HasForeignKey("DisburseBy")
                        .HasConstraintName("FK_FundDisbursement_Users");

                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("FundDisbursements")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_FundDisbursement_Projects");

                    b.HasOne("LRMS_API.ProjectPhase", "ProjectPhase")
                        .WithMany("FundDisbursements")
                        .HasForeignKey("ProjectPhaseId")
                        .HasConstraintName("FK_FundDisbursement_ProjectPhase");

                    b.HasOne("LRMS_API.Quota", "Quota")
                        .WithMany("FundDisbursements")
                        .HasForeignKey("QuotaId")
                        .HasConstraintName("FK_FundDisbursement_Quota");

                    b.HasOne("LRMS_API.User", "UserRequestNavigation")
                        .WithMany("FundDisbursementsAsRequester")
                        .HasForeignKey("UserRequest")
                        .HasConstraintName("FK_FundDisbursement_User_Request");

                    b.Navigation("AppovedByNavigation");

                    b.Navigation("DisburseByNavigation");

                    b.Navigation("Project");

                    b.Navigation("ProjectPhase");

                    b.Navigation("Quota");

                    b.Navigation("UserRequestNavigation");
                });

            modelBuilder.Entity("LRMS_API.Group", b =>
                {
                    b.HasOne("LRMS_API.User", "CreatedByNavigation")
                        .WithMany("Groups")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Groups_Users");

                    b.HasOne("LRMS_API.Department", "GroupDepartmentNavigation")
                        .WithMany("Groups")
                        .HasForeignKey("GroupDepartment")
                        .HasConstraintName("FK_Groups_Department");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("GroupDepartmentNavigation");
                });

            modelBuilder.Entity("LRMS_API.GroupMember", b =>
                {
                    b.HasOne("LRMS_API.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupMember_Groups");

                    b.HasOne("LRMS_API.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_GroupMember_Users");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LRMS_API.Invitation", b =>
                {
                    b.HasOne("LRMS_API.Group", "Group")
                        .WithMany("Invitations")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Invitations_Groups");

                    b.HasOne("LRMS_API.User", "RecieveByNavigation")
                        .WithMany("InvitationRecieveByNavigations")
                        .HasForeignKey("RecieveBy")
                        .HasConstraintName("FK_Invitations_Users_Receive");

                    b.HasOne("LRMS_API.User", "SentByNavigation")
                        .WithMany("InvitationSentByNavigations")
                        .HasForeignKey("SentBy")
                        .HasConstraintName("FK_Invitations_Users_Sent");

                    b.Navigation("Group");

                    b.Navigation("RecieveByNavigation");

                    b.Navigation("SentByNavigation");
                });

            modelBuilder.Entity("LRMS_API.Journal", b =>
                {
                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("Journals")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Journal_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LRMS_API.Notification", b =>
                {
                    b.HasOne("LRMS_API.Invitation", "Invitation")
                        .WithMany("Notifications")
                        .HasForeignKey("InvitationId")
                        .HasConstraintName("FK_Notifications_Invitations");

                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Notifications_Projects");

                    b.HasOne("LRMS_API.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notifications_Users");

                    b.Navigation("Invitation");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LRMS_API.Project", b =>
                {
                    b.HasOne("LRMS_API.GroupMember", "ApprovedByNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK_Projects_GroupMember_Approved");

                    b.HasOne("LRMS_API.User", "CreatedByNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Projects_Users_Created");

                    b.HasOne("LRMS_API.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Projects_Department");

                    b.HasOne("LRMS_API.Group", "Group")
                        .WithMany("Projects")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Projects_Groups");

                    b.HasOne("LRMS_API.TimelineSequence", "Sequence")
                        .WithMany("Projects")
                        .HasForeignKey("SequenceId")
                        .HasConstraintName("FK_Project_TimelineSequence");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Department");

                    b.Navigation("Group");

                    b.Navigation("Sequence");
                });

            modelBuilder.Entity("LRMS_API.ProjectPhase", b =>
                {
                    b.HasOne("LRMS_API.GroupMember", "AssignByNavigation")
                        .WithMany("ProjectPhaseAssignByNavigations")
                        .HasForeignKey("AssignBy")
                        .HasConstraintName("FK_ProjectPhase_GroupMember_AssignBy");

                    b.HasOne("LRMS_API.GroupMember", "AssignToNavigation")
                        .WithMany("ProjectPhaseAssignToNavigations")
                        .HasForeignKey("AssignTo")
                        .HasConstraintName("FK_ProjectPhase_GroupMember_AssignTo");

                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("ProjectPhases")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectPhase_Projects");

                    b.Navigation("AssignByNavigation");

                    b.Navigation("AssignToNavigation");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LRMS_API.ProjectRequest", b =>
                {
                    b.HasOne("LRMS_API.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("LRMS_API.Group", "AssignedCouncil")
                        .WithMany()
                        .HasForeignKey("AssignedCouncilId");

                    b.HasOne("LRMS_API.FundDisbursement", "FundDisbursement")
                        .WithMany()
                        .HasForeignKey("FundDisbursementId");

                    b.HasOne("LRMS_API.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("PhaseId");

                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LRMS_API.User", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LRMS_API.Timeline", "Timeline")
                        .WithMany()
                        .HasForeignKey("TimelineId");

                    b.Navigation("ApprovedBy");

                    b.Navigation("AssignedCouncil");

                    b.Navigation("FundDisbursement");

                    b.Navigation("Project");

                    b.Navigation("ProjectPhase");

                    b.Navigation("RequestedBy");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("LRMS_API.ProjectResource", b =>
                {
                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectResources_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LRMS_API.Quota", b =>
                {
                    b.HasOne("LRMS_API.User", "AllocatedByNavigation")
                        .WithMany("Quota")
                        .HasForeignKey("AllocatedBy")
                        .HasConstraintName("FK_Quotas_Users");

                    b.HasOne("LRMS_API.Project", "Project")
                        .WithMany("Quota")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Quotas_Projects");

                    b.Navigation("AllocatedByNavigation");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LRMS_API.Timeline", b =>
                {
                    b.HasOne("LRMS_API.User", "CreatedByNavigation")
                        .WithMany("Timelines")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Timeline_Users");

                    b.HasOne("LRMS_API.TimelineSequence", "Sequence")
                        .WithMany("Timelines")
                        .HasForeignKey("SequenceId")
                        .HasConstraintName("FK_Timeline_TimelineSequence");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Sequence");
                });

            modelBuilder.Entity("LRMS_API.TimelineSequence", b =>
                {
                    b.HasOne("LRMS_API.User", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_TimelineSequence_Users");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("LRMS_API.User", b =>
                {
                    b.HasOne("LRMS_API.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Users_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("LRMS_API.Conference", b =>
                {
                    b.Navigation("ConferenceExpenses");
                });

            modelBuilder.Entity("LRMS_API.ConferenceExpense", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("LRMS_API.Department", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LRMS_API.FundDisbursement", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("LRMS_API.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("Invitations");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("LRMS_API.GroupMember", b =>
                {
                    b.Navigation("FundDisbursementAppovedByNavigations");

                    b.Navigation("ProjectPhaseAssignByNavigations");

                    b.Navigation("ProjectPhaseAssignToNavigations");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("LRMS_API.Invitation", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("LRMS_API.Project", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Categories");

                    b.Navigation("Conferences");

                    b.Navigation("Documents");

                    b.Navigation("FundDisbursements");

                    b.Navigation("Journals");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectPhases");

                    b.Navigation("ProjectResources");

                    b.Navigation("Quota");
                });

            modelBuilder.Entity("LRMS_API.ProjectPhase", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("FundDisbursements");
                });

            modelBuilder.Entity("LRMS_API.ProjectRequest", b =>
                {
                    b.Navigation("CompletionRequestDetail");
                });

            modelBuilder.Entity("LRMS_API.ProjectResource", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("LRMS_API.Quota", b =>
                {
                    b.Navigation("FundDisbursements");
                });

            modelBuilder.Entity("LRMS_API.TimelineSequence", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Timelines");
                });

            modelBuilder.Entity("LRMS_API.User", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Documents");

                    b.Navigation("FundDisbursements");

                    b.Navigation("FundDisbursementsAsRequester");

                    b.Navigation("GroupMembers");

                    b.Navigation("Groups");

                    b.Navigation("InvitationRecieveByNavigations");

                    b.Navigation("InvitationSentByNavigations");

                    b.Navigation("Notifications");

                    b.Navigation("Projects");

                    b.Navigation("Quota");

                    b.Navigation("Timelines");
                });
#pragma warning restore 612, 618
        }
    }
}
